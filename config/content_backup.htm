<h1>簡介</h1>
<p>四設計一甲-40823108-高宇哲</p>
<p>個人網頁:</p>
<p><a href="https://40823108.github.io/wcm2020/content/index.html">https://40823108.github.io/wcm2020/content/index.html</a></p>
<p>個人倉儲:</p>
<p><a href="https://github.com/40823108/wcm2020">https://github.com/40823108/wcm2020</a></p>
<p>個人Youtube:</p>
<p><a href="https://www.youtube.com/channel/UCd3WMYoS7LQ5-Yh1u7gXbpA/featured">https://www.youtube.com/channel/UCd3WMYoS7LQ5-Yh1u7gXbpA/featured</a></p>
<p><img alt="" height="300" src="/images/12.jpg" width="247"/></p>
<h1>Grouping</h1>
<h4>亂數分組:</h4>
<h4>evenGrouping.dart:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import 'dart:html';
  
  InputElement studListUrl = querySelector("#studListUrl");
  String studUrl;
  // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面
  TextAreaElement output = querySelector("#output");
  
main() {
  querySelector("#submit").onClick.listen((e) =&gt; grouping());
}
  
grouping() {
  output.innerHtml = "";
  
  if (studListUrl.value != "") {
    studUrl = studListUrl.value;
  } else {
    studUrl = 'https://mde.tw/group/downloads/2019fall_cp_1a_list.txt';
  }
  
  // 組序由 1 開始
  int gth = 1;
  // 迴圈序號變數
  int i;
  int j;
  int total;
  int inc;
  // 每組學員暫存數列
  var gpList = [];
  // 全班分組數列
  var group = [];
  // 各組人數數列
  var numList = [];
  var courseTitle = 'wcm2020';
  
  HttpRequest.getString(studUrl).then((String resp) {
    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \n 轉為數列
    var studList = resp.trim().split("\n");
    // 數列利用 shuffle() 方法以隨機方法弄亂順序
    studList.shuffle();
    total = studList.length;
    output.text += "全班總計" + total.toString() + " 人\n";
    numList = getNumList(studList.length);
    inc = 0;
    for (i in numList){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth 有 " + i.toString() + " 人: \n";
      gpList = [];
      for (j = 0; j &lt; i; j++){
        output.text += studList[j+inc] + "\n";
        // 在各分組數列中加入將對應的學員學號
        gpList.add(studList[j+inc]);
      }
      gth = gth + 1;
      inc = inc + j;
        //output.text += studList[j] + "\n";
        // 逐步將各組暫存的分組數列加入全班分組數列中
      gpList.sort();
      group.add(gpList);
    }
    // 列出全班分組數列
    output.text += group.toString() + "\n";
    // 列出已經排序後的分組名單
    output.text += '=' * 25 + "\n";
    output.text += '以下為排序後的各組成員名單: \n';
    gth = 1;
    /*
    404231
    s4052
    4062
    s4072
    4082
    5072
    5083
    */
    // 先列出純文字以 \n 跳行組員資料
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth \n";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
        output.text += group[i][j] + "\n";
      }
      gth = gth + 1;
    }
     
    gth = 1;
    // 最後列出超文件以 &lt;br\&gt; 跳行組員資料, 包含倉儲與網站
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '\n' + '=' * 30 + "<br/>";
      output.text += "group $gth <br/>";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
          if (group[i][j].startsWith('4052') || group[i][j].startsWith('4072')) {
              output.text += "Repository: <a href='https://github.com/s" + 
                                      group[i][j] + "/" + courseTitle + "'>" + group[i][j] + 
                                      "</a>" + " | Site: <a href='https://s" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'>" + group[i][j] + 
                                      "</a><br/>";
          }
          else {
              output.text += "Repository: <a href='https://github.com/" + 
                                      group[i][j] + "/" + courseTitle +"'>" + group[i][j] + 
                                      "</a>" + " | Site: <a href='https://" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'>" + group[i][j] + 
                                      "</a><br/>";
          }
      }
      gth = gth + 1;
    }
  });
}
  
List getNumList(int total){
  // total student number
  // int total = 65;
  // initial each group expect to be "eachGrp" number of people
  int eachGrp = 10;
  // may divide into "grpNum" number of group
  int grpNum = total ~/ eachGrp;
  // vacant list
  var splits = [];
  // find remainder when total number divid into "grpNum" number of group
  int remainder = total % grpNum;
  // number of people in one group by calculation
  int calGrp = total ~/ grpNum;
  
  for (int i = 0; i &lt; grpNum; i++) {
    splits.add(calGrp);
  }
  //print(splits);
  
  for (int i = 0; i &lt; remainder; i++) {
    splits[i] += 1;
  }
  //print(splits);
  return splits;
 }</pre>
<h4>index.html:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">URL: <input id="studListUrl" size="50" type="text" value="https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt"/><br/>
<input id="submit" type="submit" value="開始分組"/><br/>
<textarea cols="80" id="output" rows="10"></textarea></pre>
<h4>style.css:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">body {
  color: white;
  font-size: 20px;
}
 
input, select, textarea {
font-size: 100%;
}</pre>
<h4>get_student.py:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS
 
import requests
import bs4
import ssl
 
'''
https://s1.mde.nfu.edu.tw:7443/?semester=1082&amp;courseno=0767
cd
2a 1082/0767
2b 1082/0780
 
2a 1072/0777
2b 1072/0790
2a 1062/0788
2a 1062/0802
 
wcm
1082/0744
 
1072/0754
1062/0765
 
wcmj
1082/2418
'''
 
app = Flask(__name__)
CORS(app)
 
@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    if semester == None:
        semester = '1082'
    if courseno == None:
        courseno = '0744'
     
    url = 'https://osa.nfu.edu.tw/query/studlist_ajax.php'
    post_var = {'pselyr': semester, 'pseqno': courseno}
 
    result = requests.post(url, data = post_var)
 
    soup = bs4.BeautifulSoup(result.content, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        output +=i[0] + "\n"
    return output
    #return  str(pselyr) + " + " +str(pseqno)
 
# 即使在近端仍希望以 https 模式下執行
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain('localhost.crt', 'localhost.key')
 
# 取 flaskapp.py 中的 uwsgi 變數設定
uwsgi = False
if uwsgi:
    # 表示程式在雲端執行
    application = app
else:
    # 表示在近端執行, 以 python3 wsgi.py 執行
    app.run(host='127.0.0.1', port=5443, debug=True, ssl_context=context)</pre>
<h4>nginx sites-available/default settings:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">server {
    listen 8000;
    server_name s1.mde.nfu.edu.tw;
    charset utf-8;
     
    listen 7443 ssl;
  
    location /static {
        alias /home/kmol2019/course_studlist/static/;
    }
  
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8087;
    }
     
    ssl_certificate /etc/stunnel/localhost.crt;
    ssl_certificate_key /etc/stunnel/localhost.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}</pre>
<h4>uwsgi7.ini:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = 127.0.0.1:8087
uid = kmol2019
gid = kmol2019
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
logto = /var/log/uwsgi/emperor.log
logfile-chown = kmol2019:kmol2019
processes = 4
threads = 2
chdir = /home/kmol2019/course_studlist
wsgi-file = /home/kmol2019/course_studlist/get_student.py</pre>
<h4>/etc/systemd/system/cmsimfly.service:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">[Unit]
Description=uWSGI to serve CMSimfly
After=network.target
 
[Service]
User=kmol2019
Group=kmol2019
WorkingDirectory=/home/kmol2019/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini
 
[Install]
WantedBy=multi-user.target
</pre>
<h2>1a</h2>
<p>wcmg1 組長: 40823131<br/>40823126<br/>40823123<br/>40823124<br/>40823128</p>
<p>wcmg2 組長: 40823112<br/>40823108<br/>40823109<br/>40823111<br/>40823145</p>
<p>wcmg3 組長: 40823125<br/>40823129<br/>40823137<br/>40823136<br/>40823151</p>
<p>wcmg4 組長: 40823110<br/>40823103<br/>40823107<br/>40823130<br/>40823142</p>
<p><span>wcmg5 組長: 40823143</span><br/>40823144<br/>40543118<br/>40823127</p>
<h1>每周進度</h1>
<h2>W10-W11</h2>
<p><span>利用 Python 程式讀取同學修課檔案, 以及從 Google Sheet 轉出的 .csv, 分別處理為 List 與 Dictionary 資料格式之後, 逐一根據同學 List 學號, 從 Dictionary 取出自評成績.</span></p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import csv
 
# read student list
 
filename = 'E:/wcm2020/data/tmp/2020_spring_score/2a/2a_list.txt'
with open(filename, encoding="utf-8") as f:
    content = f.readlines()
#print(content)
student = [x.strip() for x in content] 
#print(student)
 
 
# Timestamp, email, 修課名稱, url, score, desp, memo
# 0, 1, 2, 3, 4, 5, 6
#total = 0
all = {}
with open('y:/2020midterm.csv', encoding="utf-8") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    #print(csv_reader)
 
    line_count = 0
    for row in csv_reader:
        if line_count == 0:
            #print(f'Column names are {", ".join(row)}')
            line_count += 1
        else:
            student_num = row[1].split("@")[0]
            #print(student_num)
            student_score = row[4]
            #print(student_score)
            try:
                all.update({student_num: student_score})
            except:
                all.update({student_num: "error"})
            #print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
            #print(f'\t{row[4]}')
            #total += int(row[4])
            line_count += 1
#print(all)
#print(student)
 
 
for i in student:
     
    #if i in all:
        #pass
    #else:
        #print(str(i))
     
    try:
        print(i + "\t" + all[i])
    except:
        print(i + "\t60")
 
    #print(f'Processed {line_count} lines.')
    #print("平均=" + str(total/line_count))
</pre>
<h4>flask 程式一:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
  
app = Flask(__name__)
  
@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'
  
if __name__== '__main__': 
    app.run()</pre>
<p><span>Flask 程式二:</span></p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template
import ssl
import csv
  
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain('localhost.crt', 'localhost.key')
  
app = Flask(__name__)
  
@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'
  
@app.route('/ROCflag')
def drawROC():
    return render_template("ROCflag.html")
 
@app.route("/midterm")
def midterm():
    # read student list
 
    filename = '1a_list.txt'
    with open(filename, encoding="utf-8") as f:
        content = f.readlines()
    #print(content)
    student = [x.strip() for x in content] 
    #print(student)
 
 
    # Timestamp, email, 修課名稱, url, score, desp, memo
    # 0, 1, 2, 3, 4, 5, 6
    #total = 0
    all = {}
    with open('2020midterm.csv', encoding="utf-8") as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        #print(csv_reader)
 
        line_count = 0
        for row in csv_reader:
            if line_count == 0:
                #print(f'Column names are {", ".join(row)}')
                line_count += 1
            else:
                student_num = row[1].split("@")[0]
                #print(student_num)
                student_score = row[3]
                #print(student_score)
                try:
                    all.update({student_num: student_score})
                except:
                    all.update({student_num: "error"})
                #print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
                #print(f'\t{row[4]}')
                #total += int(row[4])
                line_count += 1
    #print(all)
    #print(student)
 
    output = ""
    for i in student:
         
        #if i in all:
            #pass
        #else:
            #print(str(i))
         
        try:
            output += (str(i) + ": <a href='/get_page/W10-W11/" + str(all[i]) + "'>"+ str(all[i]) + "</a><br/>")
        except:
            output += (str(i) + ": no data<br/>")
         
    return output
      
if __name__== '__main__': 
    app.run(ssl_context=context)</pre>
<h4>W11-加入SSH:</h4>
<p>Putty.exe:</p>
<p><img alt="" height="442" src="/images/擷取.JPG-1.JPG" width="452"/></p>
<p>key:</p>
<p><img alt="" height="339" src="/images/擷取.JPG-2.JPG" width="532"/></p>
<p>github-key:</p>
<p><img alt="" height="337" src="/images/擷取.JPG" width="540"/></p>
<h2>W12-W15</h2>
<h4>W12</h4>
<p>在Windows10中安裝Ubuntu 20.04虛擬主機</p>
<p><img alt="" height="346" src="/images/擷取.JPG-3.JPG" width="552"/></p>
<h4>W13</h4>
<p>安裝Oracle VM VirtualBox建立虛擬主機</p>
<p><img alt="" height="333" src="/images/擷取.JPG-4.JPG" width="561"/></p>
<h4>W14</h4>
<p>編譯NGINX<span>在虛擬與實體主機上完成網際 PDF 檔案管理系統.</span></p>
<h4>W15</h4>
<p>利用HxD編修pip.exe</p>
<p>將Pythonw.exe修改為Python.exe</p>
<p><img alt="" height="347" src="/images/1591932301485.jpg" width="541"/></p>
<p>利用Pypdf2切割PDF檔案</p>
<h4>Pypdf2 examples:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex1.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader
 
pdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))
information = [("WhatIsCMS",18,45)]
 
for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)</pre>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex2.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader
 
pdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))
information = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]
 
for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)</pre>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex3.py
# merge several pdf files
import sys
import PyPDF2
 
pdf_write_object = PyPDF2.PdfFileWriter()
 
#for i in sys.argv[1:]:
for i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:
    pdf_read_object = PyPDF2.PdfFileReader(i)
    print('processing file : '+ i + 'number of pages : ' +  str(pdf_read_object.numPages))
    for page in range(pdf_read_object.numPages):
        pdf_write_object.addPage(pdf_read_object.getPage(page))
 
final_file_object = open('2020CMS.pdf', 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()</pre>
<p>選取要切割的PDF檔案</p>
<p><img alt="" height="342" src="/images/擷取.JPG-6.JPG" width="538"/></p>
<p>切割完成的PDF檔案<img alt="" height="344" src="/images/擷取.JPG-5.JPG" width="538"/></p>
<h2>W16-W17</h2>
<h4>W16</h4>
<h4>何謂WSGI</h4>
<p>WSGI，全稱 Web Server Gateway Interface，或者 Python Web Server Gateway Interface ，是為 Python 語言定義的 Web 伺服器和 Web 應用程式或框架之間的一種簡單而通用的介面。自從 WSGI 被開發出來以後，許多其它語言中也出現了類似介面。</p>
<p>WSGI 的官方定義是，the Python Web Server Gateway Interface。從名字就可以看出來，這東西是一個Gateway，也就是閘道器。閘道器的作用就是在協議之間進行轉換。</p>
<p>WSGI 是作為 Web 伺服器與 Web 應用程式或應用框架之間的一種低階別的介面，以提升可移植 Web 應用開發的共同點。WSGI 是基於現存的 CGI 標準而設計的。</p>
<h4>W17</h4>
<p>PDF網際分割與合併程式</p>
<p>google API</p>
<p><img alt="" height="333" src="/images/擷取.JPG-7.JPG" width="534"/></p>
<p>合併完成</p>
<p><img alt="" height="268" src="/images/擷取.JPG-8.JPG" width="511"/></p>
<p>合併完上學期所做的所有東西</p>
<p><img alt="" height="322" src="/images/擷取.JPG-9.JPG" width="515"/></p>
<h1>Python程式</h1>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import csv
   
# read student list
filename = 'D:/1a/1alist.txt'
with open(filename, encoding="utf-8") as f:
    content = f.readlines()
    student = [x.strip() for x in content]
#print(content)
#print(student)
   
# Timestamp, email, ????, url, score, desp, memo
# 0, 1, 2, 3, 4, 5, 6
#total = 0
  
all = {}
with open('D:/1a/1a.csv', encoding="utf-8") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
       
    line_count = 0
    for row in csv_reader:
        if line_count == 0:
            #print(f'Column names are {", ".join(row)}')
            line_count += 1
        else:
            student_num = row[1].split("@")[0]
            #print(student_num)
            student_score = row[4]
            #print(student_score)
            try:
                all.update({student_num: student_score})
            except:
                all.update({student_num: "error"})
            #print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
            #print(f'\t{row[4]}')
            #total += int(row[4])
            line_count += 1
#print(all)
#print(student)
  
for i in student:
       
    #if i in all:
        #pass
    #else:
        #print(str(i))
       
    try:
        print(i + "\t" + all[i])
    except:
        print(i + "\t60")
  
   
    #print(f'Processed {line_count} lines.')
    #print("??=" + str(total/line_count))</pre>
<p><strong>Flask程式:</strong></p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
   
app = Flask(__name__)
   
@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'
   
if __name__== '__main__': 
    app.run()
</pre>
<h1>Ubuntu</h1>
<h2>伺服管理</h2>
<p>常用指令:</p>
<p>env - 列出 Shell 環境變數</p>
<p>history - 列出歷史指令, 可利用上下 arrow 鍵列出先前輸入的指令, 也可以使用 Ctrl + p 與 Ctrl + N 往前或往後列出歷史指令.</p>
<p>Ctrl + c - 終止指令執行</p>
<p>Ctrl + z - 跳出互動指令執行模式</p>
<p>cd - change directory</p>
<p>pwd - print working directory</p>
<p>mkdir - make directory</p>
<p>rmdir - remove directory</p>
<p>ls - list files</p>
<p>rm - remove files</p>
<p>cp - copy files</p>
<p>mv - move files</p>
<p>cat - display content of a file</p>
<p>tail - show just the last lines of a file</p>
<p>head - display first lines of a file</p>
<p>grep - grep keyword files</p>
<p>重要檔案:</p>
<p>每一用戶登入後都會執行 /etc/profile, 因此若有共用的環境變數, 可以寫進 /etc/profile 設定檔案</p>
<h1>Cmsimde建立網誌方法</h1>
<p>先用github建立倉儲</p>
<p><img alt="" height="337" src="/images/建立倉儲.JPG" width="539"/></p>
<p>再隨身系統裡裡建立一個tmp資料夾</p>
<p><img alt="" height="343" src="/images/tmp.JPG" width="537"/></p>
<p>到github網站git clone自己倉儲的網址,clone完後git submodule add</p>
<p><img alt="" height="340" src="/images/submodule.JPG" width="544"/></p>
<p>把子模組cmsimde放到網頁資料夾後,進入up_ir資料夾</p>
<p><img alt="" height="347" src="/images/進入upir.JPG" width="543"/></p>
<p>把所有資料複製出</p>
<p><img alt="" height="344" src="/images/複製.JPG" width="542"/></p>
<p>wcm2020-1的目錄下</p>
<p><img alt="" height="350" src="/images/貼到wcm2020-1.JPG" width="548"/></p>
<p>進入cmsimde目錄下,將wsgi.py檔拉入SciTE--&gt;tools--&gt;go</p>
<p><img alt="" height="247" src="/images/wsgi.py-go.JPG" width="546"/></p>
<p>成功建立網站</p>
<p><img alt="" height="343" src="/images/成功建立網誌.JPG" width="549"/></p>
<h1>SSH教學</h1>
<h2>SSH Key產生</h2>
<p>開啟</p>
<p><img alt="" height="351" src="/images/ssh-56.JPG" width="554"/></p>
<p>使用puttygen將private key(id_rsa)導入，並轉換為putty能夠讀懂的格式(.ppk)檔案</p>
<p>存好(.ppk)檔後</p>
<p><img alt="" height="471" src="/images/ssh-7.JPG" width="481"/></p>
<p><span>使用scite將public key (id_rsa.pub)打開，到工具列找到Options--&gt;Wrap就能看建完整的檔案內容</span></p>
<p><span><img alt="" height="611" src="/images/ssh-8.jpg" width="401"/></span></p>
<p><span>完整內容如下:</span></p>
<p><span><img alt="" height="629" src="/images/Inkedssh-9_LI.jpg" width="483"/></span></p>
<p><span>到倉儲--&gt;seeting--&gt;SSH and GPG keys,點擊New SSH key，將複製的內容貼上並儲存就可以使用了</span></p>
<p><span><img alt="" height="339" src="/images/ssh-10.JPG" width="543"/></span></p>
<h2>SSH Putty設定</h2>
<p>SSH Putty設定</p>
<p><img alt="" height="443" src="/images/ssh-1.JPG" width="452"/></p>
<p>畫線處請選擇.ppk檔案</p>
<p><img alt="" height="444" src="/images/Inkedssh-2_LI.jpg" width="454"/></p>
<p>回到Session目錄中按下save存檔</p>
<p><img alt="" height="442" src="/images/Inkedssh-3_LI.jpg" width="453"/></p>
<p>進入你要Push的資料夾,再進入\tmp\wcm2020\.git目錄下,修改config檔案,</p>
<p>將字串url=https:\\github.com:40823108/wcm2020.git修改</p>
<p><img alt="" height="734" src="/images/ssh-4.JPG" width="564"/></p>
<p>修改為:url=git@<span>github.com:40823108/wcm2020.git</span></p>
<p><span><img alt="" height="735" src="/images/ssh-5.JPG" width="565"/></span></p>
<h1>@gm帳號建立blogger</h1>
<p>使用google搜尋blogger</p>
<p><img alt="" height="331" src="/images/搜尋blogger.JPG" width="530"/></p>
<p>選擇學校@gm帳號</p>
<p><img alt="" height="339" src="/images/選擇學校@gm帳號.JPG" width="542"/></p>
<p>建立網址</p>
<p><img alt="" height="339" src="/images/建立網誌.JPG" width="542"/></p>
<p>給予網址</p>
<p><img alt="" height="331" src="/images/給予網址.JPG" width="530"/></p>
<p>給予名稱</p>
<p><img alt="" height="334" src="/images/給予名稱.JPG" width="534"/></p>
<p>新增草稿</p>
<p><img alt="" height="338" src="/images/新增草稿.JPG" width="541"/></p>
<p>加入所要發布的標題與文章</p>
<p><img alt="" height="337" src="/images/加入所要發布的文章.JPG" width="539"/></p>
<p>成功建立網誌</p>
<p><img alt="" height="347" src="/images/成功建立.JPG" width="555"/></p>
<h1><span>VirtualBOX虛擬主機</span></h1>
<p><span>進入虛擬主機</span></p>
<p><span>進入開機畫面,輸入密碼</span></p>
<p><span><img alt="" height="456" src="/images/桌面-1.JPG" width="542"/></span></p>
<p><span>進入程式集</span></p>
<p><span><img alt="" height="451" src="/images/Inked桌面-3_LI.jpg" width="538"/></span></p>
<p><span>進入Terminl</span></p>
<p><span><img alt="" height="463" src="/images/桌面-8.JPG" width="554"/></span></p>
<p><span>建立github資料夾,進入github資料夾後,git clone</span></p>
<p></p>
<p><img alt="" height="451" src="/images/桌面-2.JPG" width="537"/></p>
<p>完成後進入程式集,點選FILE Manger PCManFM</p>
<p><img alt="" height="461" src="/images/桌面-4.JPG" width="549"/></p>
<p>進入github資料夾</p>
<p><img alt="" height="446" src="/images/桌面-5.JPG" width="533"/></p>
<p>進入WCM2020資料夾</p>
<p><img alt="" height="452" src="/images/桌面-6.JPG" width="539"/></p>
<p>成功建立</p>
<p><img alt="" height="452" src="/images/桌面-7.JPG" width="540"/></p>
<p></p>