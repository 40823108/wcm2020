var tipuesearch = {"pages": [{'title': 'about', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'about.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n we have\xa0 \n', 'tags': '', 'url': 'Develop.html'}, {'title': '每周進度', 'text': '', 'tags': '', 'url': '每周進度.html'}, {'title': 'W10-W11', 'text': '利用 Python 程式讀取同學修課檔案, 以及從 Google Sheet 轉出的 .csv, 分別處理為 List 與 Dictionary 資料格式之後, 逐一根據同學 List 學號, 從 Dictionary 取出自評成績. \n import csv\n \n# read student list\n \nfilename = \'E:/wcm2020/data/tmp/2020_spring_score/2a/2a_list.txt\'\nwith open(filename, encoding="utf-8") as f:\n    content = f.readlines()\n#print(content)\nstudent = [x.strip() for x in content] \n#print(student)\n \n \n# Timestamp, email, 修課名稱, url, score, desp, memo\n# 0, 1, 2, 3, 4, 5, 6\n#total = 0\nall = {}\nwith open(\'y:/2020midterm.csv\', encoding="utf-8") as csv_file:\n    csv_reader = csv.reader(csv_file, delimiter=\',\')\n    #print(csv_reader)\n \n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            #print(f\'Column names are {", ".join(row)}\')\n            line_count += 1\n        else:\n            student_num = row[1].split("@")[0]\n            #print(student_num)\n            student_score = row[4]\n            #print(student_score)\n            try:\n                all.update({student_num: student_score})\n            except:\n                all.update({student_num: "error"})\n            #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\')\n            #print(f\'\\t{row[4]}\')\n            #total += int(row[4])\n            line_count += 1\n#print(all)\n#print(student)\n \n \nfor i in student:\n     \n    #if i in all:\n        #pass\n    #else:\n        #print(str(i))\n     \n    try:\n        print(i + "\\t" + all[i])\n    except:\n        print(i + "\\t60")\n \n    #print(f\'Processed {line_count} lines.\')\n    #print("平均=" + str(total/line_count))\n \n flask 程式一: \n from flask import Flask\n  \napp = Flask(__name__)\n  \n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n  \nif __name__== \'__main__\': \n    app.run() \n Flask 程式二: \n from flask import Flask, render_template\nimport ssl\nimport csv\n  \ncontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\ncontext.load_cert_chain(\'localhost.crt\', \'localhost.key\')\n  \napp = Flask(__name__)\n  \n@app.route(\'/\') \ndef hello_world():\n    return \'Hello, From Flask!\'\n  \n@app.route(\'/ROCflag\')\ndef drawROC():\n    return render_template("ROCflag.html")\n \n@app.route("/midterm")\ndef midterm():\n    # read student list\n \n    filename = \'1a_list.txt\'\n    with open(filename, encoding="utf-8") as f:\n        content = f.readlines()\n    #print(content)\n    student = [x.strip() for x in content] \n    #print(student)\n \n \n    # Timestamp, email, 修課名稱, url, score, desp, memo\n    # 0, 1, 2, 3, 4, 5, 6\n    #total = 0\n    all = {}\n    with open(\'2020midterm.csv\', encoding="utf-8") as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=\',\')\n        #print(csv_reader)\n \n        line_count = 0\n        for row in csv_reader:\n            if line_count == 0:\n                #print(f\'Column names are {", ".join(row)}\')\n                line_count += 1\n            else:\n                student_num = row[1].split("@")[0]\n                #print(student_num)\n                student_score = row[3]\n                #print(student_score)\n                try:\n                    all.update({student_num: student_score})\n                except:\n                    all.update({student_num: "error"})\n                #print(f\'\\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.\')\n                #print(f\'\\t{row[4]}\')\n                #total += int(row[4])\n                line_count += 1\n    #print(all)\n    #print(student)\n \n    output = ""\n    for i in student:\n         \n        #if i in all:\n            #pass\n        #else:\n            #print(str(i))\n         \n        try:\n            output += (str(i) + ":  "+ str(all[i]) + " ")\n        except:\n            output += (str(i) + ": no data ")\n         \n    return output\n      \nif __name__== \'__main__\': \n    app.run(ssl_context=context) \n W11-加入SSH: \n Putty.exe \n \n key \n \n github-key \n \n', 'tags': '', 'url': 'W10-W11.html'}]};